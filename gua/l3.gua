// 预习 3 的代码, 需要安装 2.5.4 版本的开发软件
// 安装方法见下面的链接（现在已经支持运行程序一键安装）
// https://github.com/kuaibiancheng/ProjectOpenCourse/wiki/安装配置方法

// array 可以干嘛？
// array 可以存储很多元素, 每个元素的值、类型都可以不同
// 具体看下面的例子

var demoArray = function() {
    // array（数组）常用操作
    // 创建数组
    // 使用 [] 符号, 每个元素用逗号分隔
    var a = [1, 3, 4, 5]
    // 现在 a 是一个 array, 拥有 4 个元素


    // 可以用 .length() 的方式得到 array 的长度
    log('求 array 长度', a.length())
    // 使用 .length() 可以求出数组的长度（数组中元素的个数）
    // 值可以用变量接住
    var length = a.length()
    log('a.length() ', length)

    // 访问元素
    // 对于数组中的每个元素, 可以通过下标访问
    // 下标就是元素在数组中的序号, 从 0 开始
    // 下标访问语法是 [] 中括号
    log('用下标访问 array 中的元素')
    log('a[0]', a[0])
    log('a[1]', a[1])
    log('a[2]', a[2])
    log('a[3]', a[3])
    // 因为一共只有 4 个元素, 所以访问不存在的下标会出错
    // log(a[4])

    // 手动访问元素当然是低效的
    // 可以用循环来访问元素, 这个过程叫 遍历
    log('循环访问 array 所有元素')
    var i = 0
    while(i < a.length()) {
        log('a[i]', a[i])
        i = i + 1
    }
}


// 向已经存在的 array 中添加新元素
// 可以用数组的 push 函数往列表末尾插入一个元素
// 并且, 这个新元素可以是任意类型, 这里是一个字符串
// 请注意, 这是一个全新的概念
// 数组类型的变量可以用 .函数() 的方式来进行操作
var demoArrayAdd = function() {
    var a = [1, 3, 4, 5]
    a.add('新元素')
    log('a push ', a)
    // [1, 3, 4, 5, '新元素']

    a.add(0)
    log('a.add(0)', a)
    // [1, 3, 4, 5, '新元素', 0]

    // 多添加几个元素
    a.add(12)
    a.add(34)
    a.add(56)
    log('a.add 12 34 56', a)
}


// 小练习, 给定一个只包含数字的 array
// 1. 得到列表中最小的元素
// 2. 得到列表中所有数字的和
// 3. 得到列表中所有数字的平均数
//  array.length() 可以得到 array 长度（也就是元素个数）

var demoMin = function() {
    // 这是一段获取数组中最小元素的代码
    var a1 = [3, 9, 2, 0, 8]
    var min = a1[0]
    var i = 0
    while(i < a1.length()) {
        var n = a1[i]
        if (n < min) {
            min = n
        }
        i += 1
    }
    log('min', min)
}



// 字符串
// 字符串的操作
// 字符串可以判断相等、可以相加
// 例子
// log('判断相等或者包含')
// log('good' == 'good')
// log('good' == 'bad')
// log('good' != 'bad')

// 拼接得到一个新字符串
// log('very' + 'good')
// log('very ' + 'good')

// 得到一个你想要的字符串有多种方式
// 加号的方式固然能用, 但是现在有现代的方式
// 见下方的例子, 字符串有一个 .format 函数可以替换其中的 {}
// var name = 'gua'
// var hello = '{}, 你好'.format(name)
// log('format dmeo ',  name)
// 简单说来, 就是 {} 会被变量 name 替换形成新字符串

// 字符串相当于一个 array, 可以用下标访问
// 看例子, 看结果
// 下面字符串 s 的长度是 7, 但是下标是从 0 开始的, 所以最大下标是 6
// var s = 'iamgood'
// log('s[0]', s[0])
// log('s[1]', s[1])
// log('s[2]', s[2])
// log('s[6]', s[6])
//
// 当然也就可以和 array 一样用循环遍历了
// 自己试试


// 字符串不能使用下标来赋值
// 只能拼接起来生成一个新的字符串
// var name1 = 'gua'
// name1[0] 是 'g'
// 假如你进行如下操作 name1[0] = 'A'
// 会产生一个错误, 因为字符串不能这样操作


// 字符串可以用 .cut 函数来获取子字符串
// 当然 array 也可以这样切片
// 语法如下
// s.cut(开始下标, 结束下标)
// log('cut 0 3', s.cut(0, 3))  // 'iam'
// log('cut 1 3', s.cut(1, 3))  // 'am'

// 可以省略结束下标参数, 表示取到底
// log('cut 0  ', s.cut(3))     // 'good'

// cut 操作不会影响原来的字符串
// log('cut 0 s ', s)

// 本作业需要安装新版 gualang-2.5.9 编译器
// 请用下面的链接中的方法来安装配置 2.5.9 版本的编译器
// https://github.com/kuaibiancheng/ProjectOpenCourse/wiki


// 例子 1
// 求数组的和
const sum = function(array) {
    // 先设置一个变量 s 用来存数组的和
    var s = 0
    var i = 0
    while (i < array.length()) {
        var n = array[i]
        s = s + n
        i = i + 1
    }
    return s
}


// 作业 1
// 参数是一个只包含数字的 array
// 求 array 的乘积
// 函数定义如下

// 提示：
//     通过遍历数组，然后累乘的方式计算数组的乘积，参考例子 1
//
// 分步提示：
//     1. 先设置一个变量 s 用来存数组的乘积，初始值为 1
//     2. 遍历数组，用变量 n 保存元素的值
//     3. 累乘每次的变量 n 到变量 s
//     4. 循环结束后，变量 s 里面存的是数组中所有元素的乘积
//     5. 返回变量 s（很重要，一定要 return s）

const product = function(array) {
    var s = 1
    var i = 0
    while(i < array.length()){
        var n = array[i]
        s = s * n
        i += 1
    }
    return s
}




// 作业 2
// 返回一个数字的绝对值
// 函数定义如下
//
// 参考上课求绝对值的代码来实现
// 1. 如果 n < 0，就把 n 的值赋值成 -n
// 2. 返回 n 的值（很重要，一定要 return n）
const abs = function(n) {
    if(n < 0){
        return -n
    }else {
        return n
    }
}




// 作业 3
// 参数是一个只包含数字的 array
// 求 array 中所有数字的平均数
//
// 函数定义如下
// 求数组的平均数就是先求出数组中元素的总和，然后除以数组的长度（即元素的个数）
// 1. 使用例子 1 中的 sum 函数来计算数组中所有元素的总和
// 2. 使用 len 函数计算出数组中元素的个数
// 3. 使用数组中元素的总和除以数组中元素的个数，得到平均数
// 4. 返回平均数
const average = function(array) {
    var s = sum(array)
    var len = array.length()
    var a = s / len1
    return a
}




// 作业 4
// 参数是一个只包含数字的 array
// 求 array 中最小的数字
//
// 先选数组中的第一个元素作为 s 的初始值
// 然后遍历数组，将每一个元素都与初始值比较
// 如果元素的值比初始值小，就把那个元素设置为 s 的值
// 最后返回 s 的值
// 1. 将数组中第一个元素的值赋值给 s 作为初始值
// 2. 遍历数组，用变量 n 保存元素的值
// 3. 比较 n 与 s 的值，如果 n < s，就把 n 的值赋值给 s
// 4. 循环结束后，变量 s 里面存的是数组中最小的数字
// 5. 返回变量 s（很重要，一定要 return s）
const min = function(array) {

}





// 作业 5
// 参数是一个数字 n
// 返回以下序列的结果
// 1 - 2 + 3 - 4 + 5 ... n

// 首先可以把序列看成是一个数组，这样就可以循环 n 次。
// 观察序列可以发现一个规律：奇数的时候是加，偶数的时候是减
//
// 1. 先设置一个变量 s 用来存序列的和，初始值为 0
// 2. 循环 n 次，从 1 开始，到 n + 1 结束，即包括 n 但是不包括 n + 1
// 3. 判断每次循环的值。如果是奇数，累加这个数到 s 上，如果是偶数，累减这个数到 s 上
// 4. 循环结束后，变量 s 里面存的是序列的和
// 5. 返回变量 s（很重要，一定要 return s）
const sum1 = function(n) {
    var i = 1
    var s = 0
    while(i <= n) {
        if(i % 2 == 1){
            s += i
        }else {
            s -= i
        }
        i += 1
    }
    return s
}



// 作业 6
// 参数是一个数字 n
// 返回以下序列的结果
// 1 + 2 - 3 + 4 - ... n
// 还是把序列看成是一个数组，不过从第二个元素（也就是 2 开始遍历）这样就可以循环 n - 1 次
//
// 1. 先设置一个变量 s 用来存序列的和，初始值为 1，这样就可以从 2 开始计算循环了
// 2. 循环 n - 1 次，从 2 开始，到 n 结束（包括 n）
// 3. 判断每次循环的值。
//    如果是第一个数字（这里是从 2 开始的），观察式子的规律，从 2 开始之后，当一个数字是奇数时，就是减去这个数（比如说 3 5 7 9...）。
//    当一个数字是偶数时，就是加上这个数（比如 2 4 6 8...）。
// 4. 循环结束后，变量 s 里面存的是序列的和
// 5. 返回变量 s（很重要，一定要 return s）

const sum2 = function(n) {
    var s = 1
    var i = 2
    while(i <= n){
        if(i % 2 == 0){
            s += i
        }else {
            s -= i
        }
        i += 1
    }
    return s
}



// 作业 7
//
// 实现 fac 函数
// 接受一个参数 n
// 返回 n 的阶乘, 1 * 2 * 3 * ... * n
// 计算从 1 到 n 的阶乘，重复了 n 次，所以可以用循环来处理
//
// 1. 先设置一个变量 s 用来存阶乘，初始值为 1
// 2. 用循环把 1 到 n 的数字相乘保存到 s 中
// 3. 循环结束后，变量 s 里面存的是从 1 到 n 的阶乘, 返回变量 s（很重要，一定要 return s）

const fac = function(n) {
    var s = 1
    var i = 1
    while(i <= n){
        s *= i
        i += 1
    }
    return s
}

const ensure = function(condition, message){
    if(condition){
        log('成')
    }else {
        log('失败， ', message)
    }
}

const __main = function(){
    demoArray()
    demoArrayAdd()
    demoMin()
}

__main()
